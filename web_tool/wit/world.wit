package plat:plugin;

world plat-world {
    include wasi:http/proxy@0.2.0;
    
    export lifecycle: interface {
        on-start: func() -> result<_, string>;
    }

    import lock: interface {
        record lock-handler {
            name: string,
        }

        create-lock-handler: func(name: string) -> result<lock-handler, string>;
        drop-lock-handler: func(handler: lock-handler) -> result<_, string>;

        lock: func(handler: lock-handler) -> result<_, string>;
        unlock: func(handler: lock-handler) -> result<_, string>;
    }

    import channel: interface {
        record channel-handler {
            name: string,
        }

        create-channel-handler: func(name: string) -> result<channel-handler, string>;
        drop-channel-handler: func(handler: channel-handler) -> result<_, string>;

        send: func(handler: channel-handler, message: string) -> result<_, string>;
        recv: func(handler: channel-handler) -> result<_, string>;
    }

    import task: interface {
        spawn: func(payload: string) -> result<_, string>;
    }
    export task: interface {
        on-spawn: func(payload: string) -> result<_, string>;
    }

    import plat: interface {
        sig: func(source: list<u8>) -> result<list<u8>, string>;
        verify: func(source: list<u8>, sig: list<u8>) -> result<bool, string>;
    }
}
